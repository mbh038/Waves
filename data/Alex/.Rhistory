g
g<-ggplot(data=dat,aes(x=x,y=d,fill=COL[7]))+geom_bar(stat="identity",aes(width=0.4,colour = COL[7],alpha=0.5))
g
g<-ggplot(data=dat,aes(x=x,y=d,fill=COL[7]))+geom_bar(stat="identity",aes(width=0.4,colour = COL[7],alpha=0.3))
g
?Rmarkdown
?markdown
knit_engines$set()
?cat
qnorm(-3.7,0,1.7)
pnorm(-3.7,0,1.7)
?swirl
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
ls()
swirl()
?InstallCourses
install_from_swirl(Getting and Cleaning Data, dev = FALSE, mirror = "github")
install_from_swirl(Getting_and_Cleaning_Data, dev = FALSE, mirror = "github")
SWIRL()
swirl()
7/(200000/10000)
7/(10000/200000)
pi()
pi
pi * (6371e6)^2*0.0323/8130
pi * (6371e6)^2*0.0323/(0.7*8130)
pi * (6371e3)^2*0.0323/(0.7*8130)
4*pi * (6371e3)^2*0.0323/(0.7*8130)
(4)*pi * (6371e3)^2*0.0323/(0.7*8130))/1e9
(4*pi * (6371e3)^2*0.0323/(0.7*8130))/1e9
install.packages("circular")
library(circular)
source('~/.active-rstudio-document')
par(1,1)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
?circular
?windrose
dir <- circular(runif(100, 0, 360), units="degrees")
mag <-  rgamma(100, 15)
sample <- data.frame(dir=dir, mag=mag)
par(mfrow=c(2,2))
res <- windrose(sample)
## we join two pedals and keep the same shrink (scale of the plot)
breaks <-circular(seq(0, 2 * pi, by = pi/6))
breaks <- breaks[-2]
windrose(sample, breaks=breaks, main="The same but with two pedals joined",
shrink=res$shrink)
dir <- circular(runif(100, 0, 360), units="degrees")
mag <-  rgamma(100, 15)
sample <- data.frame(dir=dir, mag=mag)
par(mfrow=c(1,1))
res <- windrose(sample)
library(openintro)
data(COL)
COL
res <- windrose(sample)
res <- windrose(sample,fill.col=c("#569BBD","#F05133"))
res <- windrose(sample,fill.col=c("#569BBDC0","#F05133C0"))
?Constants
5.67e-8 * 223^4
5.67e-8 * 255^4
0.4*1370/4
dweights1=c(30.23,8.94,29.56,19.69,12.16,15.47,8.4,8.78,15.76,14.15)
dweights2=c(14.4,21.09,16.51,16.41,20.15,16.09,13.48,10.62,11.28,14.27)
allweights=c(dweights1,dweights2)
summaary(allweights)
summary(allweights)
summary(dweights1)
summary(dweights2)
summary(allweights)
hist(allweights)
hist(allweights)
qqnorm(allweights)
qqline(allweights)
103/.6
.6*172
96*74
96*6
576*5
demo(plotmath)
demoPlotmath
demo(plotmath)
paste(expression(x %+-% y),"=",3)
expression(x %+-% y)
text(expression(x %+-% y))
sessionInfo()
library(Biobase)
source("http://www.bioconductor.org/biocLite.R")
biocLite()
install_github("genomicsclass/ph525x")
library(devtools)
install_github("genomicsclass/ph525x")
source("http://www.bioconductor.org/biocLite.R")
library(BiocInstaller)
biocLite("Biobase")
biocLite("genefu")
library(devtools)
install_github("genomicsclass/ph525x")
install_github("genomicsclass/ph525x")
library(Biobase)
source("http://www.bioconductor.org/biocLite.R")
biocLite()
library(devtools)
library(IRanges)
install_github("genomicsclass/ph525x")
sessionInfo()
library(BiocInstaller)
biocLite("Homo.sapiens")
source("http://www.bioconductor.org/biocLite.R")
biocLite()
library(BiocInstaller)
biocLite("geuvPack")
setwd("H:/Rspace/RE_Community/SolarLab/Rcode")
source('H:/Rspace/RE_Community/SolarLab/Rcode/viewResults.R')
setwd("H:/Rspace/RE_Community/SolarLab/Rcode")
# EnergySim
windMW<-13#seq(0,50,5)
solarMWp<-13#seq(0,50,5)
geoMWe<-3
mwsref<-1#6.3
mws<-1#9*(70/45)^(1/7)
windPower<-read.table("../data/specs/windPowerCurve.csv",header=FALSE,sep=",")
# read in demand files
# domestic demand MW
houses=17852
ddata<-read.csv("../data/profiles/EESP/domDem10.csv")
domDemand<-numeric()
domDemand<-houses*ddata$W/1e6
rm(ddata)
sum(domDemand/6)
#non-domestic demand
ndDemand<-rep(0,144*365)
nProfiles=5
pc10path<-"../data/profiles/UKERC/pc10minThin/"
for (i in 3:8){
pc10file<-paste0(pc10path,"pc10.",i,".csv")
pc10<-read.csv(pc10file,stringsAsFactors=FALSE)$W
#plot(pc10)
ndDemand<-ndDemand+pc10
}
#plot(ndDemand,type="l")
sum(ndDemand/6000) # MWh per representative UKERC business
nbusiness=1364 # total business in St Austell
medianNonDomUsage<-7.422 # MWh, DECC 2015
totalNdDemand<-ndDemand*(1364*7.422)/sum(ndDemand/6)
# microDemand<-0.83*nbusiness*(10000/sum(ndDemand/6000))*ndDemand/1e6
# smallDemand<-0.162*nbusiness*(20000/sum(ndDemand/6000))*ndDemand/1e6
# largeDemand<-0.008*nbusiness*(40000/sum(ndDemand/6000))*ndDemand/1e6
#
# totalNdDemand<-microDemand+smallDemand+largeDemand
#rm(ndDemand,microDemand,smallDemand,largeDemand)
#plot(totalNdDemand,type="l")
sum(totalNdDemand/6) # annual Non Dom demand in MWh
# combine to give total demand
demand=domDemand+totalNdDemand
# library(rafalib)
# mypar(1,1)
# plot(demand,type="l",ylim=c(0,16))
# lines(domDemand,col="red")
# lines(totalNdDemand,col="blue")
# input file paths
sipfilepathstem<-"../data/synthetic/CamBSRN_Solar10minSyn/CamSolarSyn10min"
wipfilepathstem<-"../data/synthetic/CallywithWind10minSyn/Cally"
sipfilepathtail<-".csv"
wipfilepathtail<-"_10min.csv"
# set up input file numbers
ipfilename<-function(file,ipfilepathstem,ipfilepathtail){
ipfilehandle<-as.character(file)
if (file < 10){
ipfilehandle<-paste0("00",ipfilehandle)
}
if (file >= 10 && file < 100){
ipfilehandle<-paste0("0",ipfilehandle)
}
ipfilename<-paste0(ipfilepathstem,ipfilehandle,ipfilepathtail)
}
wp<-function(x){
ifelse(x>19,1,windPower[which(windPower[,1]==x),2])
}
## loop through solar and wind files
numTrials<-1000
trial=0
stored=0
res<-data.frame()
#start<-proc.time()
begin=Sys.time()
trial<<-trial+1
wfile<-floor(100*runif(1)+1)
sfile<-floor(100*runif(1)+1)
print(paste("Trial: ",trial," Solar file:",sfile,", Wind file: ",wfile,sep=" "))
wfilename<-ipfilename(wfile,wipfilepathstem,wipfilepathtail)
sfilename<-ipfilename(sfile,sipfilepathstem,sipfilepathtail)
wdata<-read.csv(wfilename)[,2]
#wdata<-floor(wdata*mws/mwsref)
sdata<-read.csv(sfilename)[,2]
# data$day<-min(365,data$t %/% 144 +1)
solarop<-numeric()
windop<-numeric()
geoop<-rep(geoMWe,length(wdata))
totalop<-numeric()
#solarop<-matrix(length(solarMWp)*length(sdata),length(sdata),length(solarMWp))
#windop<-matrix(length(windMW)*length(wdata),length(wdata),length(windMW))
# windop<-unlist(sapply(wdata,function(x){
#   windMW*windPower[which(windPower[,1]==x),2]
# }))
#print(paste("Solar: ",SolarMWp,", Wind: ",WindMW))
windop<-windMW*unlist(sapply(wdata,wp))
# windop<-sapply(windMW,function(x){
#   x*unlist(sapply(wdata,wp))
# })
solarop<-solarMWp*sdata/1000
# solarop<-sapply(solarMWp,function (x){
#   x*sdata/1000
# })
print (paste0("windop: ",length(windop)," solarop: ",length(solarop)))
totalop<-windop+solarop+geoop
balance<-totalop-demand# sweep(totalop,1,demand,FUN="-") #totalop-demand
ebalance<-cumsum(balance)/6000 # in GWhy
#powerop<-data.frame(windop,solarop,totalop,demand,balance,ebalance)
# summary(powerop)
#diff<-proc.time()-start
#print(diff)
c(min(balance),max(balance),mean(balance),median(balance),min(ebalance),max(ebalance),mean(ebalance),median(ebalance))
#cbind(balance,ebalance)
end=Sys.time()
print(paste0("Time taken= ",end-begin))
mypar(3,1)
days<-seq(1,1000)/144
plot(days,demand[1:1000],type="l",
ylim=c(-12,12),
xlab="Winter days",
ylab="Power (MW)"
)
lines(days,solarop[1:1000],col="red")
lines(days,windop[1:1000],col="blue")
lines(days,balance[1:1000],col="green")
plot(days,demand[25001:26000],type="l",
ylim=c(-12,12),
xlab="Summer days",
ylab="Power (MW)"
)
lines(days,solarop[25001:26000],col="red")
lines(days,windop[25001:26000],col="blue")
lines(days,balance[25001:26000],col="green")
ydays<-seq(1,length(ebalance))/144
plot(ydays,ebalance,type="l")
mypar(3,1)
hist(demand)
hist(totalop)
hist(balance)
abline(h=mean(ebalance),col="blue")
text(0,mean(ebalance),"mean energy balance",pos=0)
text(0,mean(ebalance),"mean energy balance",pos=1)
text(0,mean(ebalance),"mean energy balance",pos=2)
text(0,mean(ebalance),"mean energy balance",pos=3)
text(0,mean(ebalance),"mean energy balance",pos=4)
text(0,mean(ebalance),"mean energy balance",pos=5)
text(10,mean(ebalance),"mean energy balance",pos=3)
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
mypar(3,1)
days<-seq(1,1000)/144
plot(days,demand[1:1000],type="l",
ylim=c(-12,12),
xlab="Winter days",
ylab="Power (MW)"
)
lines(days,solarop[1:1000],col="red")
lines(days,windop[1:1000],col="blue")
lines(days,balance[1:1000],col="green")
plot(days,demand[25001:26000],type="l",
ylim=c(-12,12),
xlab="Summer days",
ylab="Power (MW)"
)
lines(days,solarop[25001:26000],col="red")
lines(days,windop[25001:26000],col="blue")
lines(days,balance[25001:26000],col="green")
ydays<-seq(1,length(ebalance))/144
plot(ydays,ebalance,type="l",xlab="Day",ylab="Energy balance (GWh)")
abline(h=mean(ebalance),col="blue")
text(30,mean(ebalance),"mean energy balance",pos=3)
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
mypar(3,1)
days<-seq(1,1000)/144
plot(days,demand[1:1000],type="l",
ylim=c(-14,14),
xlab="Winter days",
ylab="Power (MW)"
)
lines(days,solarop[1:1000],col="red")
lines(days,windop[1:1000],col="blue")
lines(days,balance[1:1000],col="green")
legend(0,-10,
c("Demand","Solar generation","Wind generation","Balance"),
lty=c(1,1,1,1),
lwd=c(2.5,2.5,2.5,2.5),
col=c("black","red","blue","green")
)
plot(days,demand[25001:26000],type="l",
ylim=c(-12,12),
xlab="Summer days",
ylab="Power (MW)"
)
lines(days,solarop[25001:26000],col="red")
lines(days,windop[25001:26000],col="blue")
lines(days,balance[25001:26000],col="green")
ydays<-seq(1,length(ebalance))/144
plot(ydays,ebalance,type="l",xlab="Day",ylab="Energy balance (GWh)")
abline(h=mean(ebalance),col="blue")
text(30,mean(ebalance),"mean energy balance",pos=3)
mypar(3,1)
hist(demand)
hist(totalop)
hist(balance)
#
#
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
lines(days,balance[1:1000],col="green")
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
library(rafalib)
?openintro
library(openintro)
install.packages(openintro)
install.packages("openintro")
library(openintro)
data(COL)
COL
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/EnergySim-1trial.R')
setwd("H:/Rspace/RE_Community/SolarLab/Rcode")
source('H:/Rspace/RE_Community/SolarLab/Rcode/viewResults.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/viewResults.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/viewResults.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/viewResults.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/viewResults.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/viewResults.R')
setwd("H:/Rspace/RE_Community/SolarLab/Rcode")
source('H:/Rspace/RE_Community/SolarLab/Rcode/viewResults.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/viewResults.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/viewResults.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/viewResults.R')
setwd("H:/Rspace/RE_Community/SolarLab/data/Alex")
library(png)
library(grid)
#img <- readPNG("figures/solarZenithAngle.png")
# grid.raster(img)
# declination angle
deltaOdot<-function(t){
# t is the time in day number 1-365
asin(sin(-0.4091)*cos((2*pi/365.24)*(t+10)+0.0334*sin((2*pi/365.24)*(t-2))))
}
# hour angle at sunrise and sunset
h0<-function(phi,t){
acos(tan(phi)*tan(deltaOdot(t)))
}
# cosine of zenith angle
cosTheta<-function(phi,delta,h){
# theta is the zenith angle
sin(phi)*sin(delta)+cos(phi)*cos(delta)*cos(h)
}
solarFlux<-function(S0,phi,t){
h<-pi*(2*(t-floor(t))-1)
delta<-deltaOdot(t)
flux<-S0*cosTheta(phi,delta,h)
flux<-pmax(flux,rep(0,length(t)))
flux
}
phi=(pi/180)*50
t=seq(1,365,length.out=365*288)
plot(t,180*deltaOdot(t)/pi,typ="l",ylab="delta",xlab="Day of year")
t=seq(1,365,length.out=360*288)
phi=(pi/180)*0.01
h0s<-h0(phi,t)
plot(t,24*(pi-h0s)/pi,type="l",ylim=c(0,20),xlab=("day of the year"),ylab=("daylight time (hours)"),
main=("daylight time for latitudes 0 to 60N"))
for (lat in seq(10,60,10)){
phi=(pi/180)*lat
h0s<-h0(phi,t)
lines(t,24*(pi-h0s)/pi,type="l",col=lat/10)
}
grid(col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
#choose the day
day<-0
# choose the latitude
phi=(pi/180)*50
S0=1000
t=seq(1,366,length.out=365*144)
t10min<-seq(1,52560)
daybegin<-1
dayend<-365*144
Q<-solarFlux(S0,phi,t)
clearSkyYear<-data.frame(t10min,Q)
write.table(clearSkyYear,file="clearSkyYear.csv",row.names=FALSE,col.names=FALSE,sep=",")
#choose the day
day<-0
# choose the latitude
phi=(pi/180)*50
S0=1000
t=seq(1,366,length.out=365*144)
t10min<-seq(1,52560)
daybegin<-1
dayend<-365*144
Q<-solarFlux(S0,phi,t)
clearSkyYear<-data.frame(t10min,Q)
write.table(clearSkyYear,file="clearSkyYear.csv",row.names=FALSE,col.names=FALSE,sep=",")
csk<-read.csv("clearSkyYear.csv",stringsAsFactors=FALSE,header=FALSE)
duchy<-read.csv("duchy.csv",stringsAsFactors=FALSE,header=FALSE)
names(csk)=c("t10min","Sol")
names(duchy)=c("t10min","Sol")
csk$day=csk$t10min %/% 144 +1
csk$day[52560]=365
duchy$day=duchy$t10min %/% 144 +1
library(rafalib)
mypar(6,2)
day=2
hours=seq(0,143)/6
for (day in 288:364){
imgname<-paste0("day",day,".png")
png(imgname,,width = 280, height = 280)
thisday=cbind(hours,csk[csk$day==day,2],duchy[duchy$day==day,2])
print (paste(day,length(thisday[,2]),length(thisday[,3])),sep=",")
ylim=c(0,900)#c(0,max(max(thisday[,2]),max(thisday[,3])))
plot(hours,thisday[,2],xlim=c(0,24),xlab="Time (h)",ylab="Insolation (W/m^2)",col="blue",type="l",ylim=ylim)
lines(hours,thisday[,3],col="red")
text(1.5,70,paste0("Day: ",day))
dev.off()
}
for (day in 2:105){
thisday=cbind(hours,csk[csk$day==day,2],duchy[duchy$day==day,2])
ylim=c(0,900)#c(0,max(max(thisday[,2]),max(thisday[,3])))
plot(hours,thisday[,2],xlim=c(0,24),xlab="Time (h)",ylab="Insolation (W/m^2)",col="blue",type="l",ylim=ylim)
lines(hours,thisday[,3],col="red")
text(1.5,70,paste0("Day: ",day))
}
png("somedays.png",width=595,height=842)
chosen<-c(299,298,312,317,348,358,18,22,37,46,79,77,101,91)
months<-c("October 2015","November 2015","December 2015","January 2016","February 2016","March 2016","April 2016")
mypar(7,2)
count=0
for (day in chosen[1:14]){
count=count+1
thisday=cbind(hours,csk[csk$day==day,2],duchy[duchy$day==day,2])
ylim=c(0,800)#c(0,max(max(thisday[,2]),max(thisday[,3])))
plot(hours,thisday[,2],xlim=c(0,24),xlab="Time (h)",ylab="Insolation (W/m^2)",col="blue",type="l",ylim=ylim)
lines(hours,thisday[,3],col="red")
text(0.,0.9*ylim[2],paste0("Day: ",day,", ",months[(count +1)%/% 2]),pos=4)
}
dev.off()
library(rafalib)
mypar(6,2)
day=2
hours=seq(0,143)/6
for (day in 288:364){
imgname<-paste0("day",day,".png")
png(imgname,,width = 280, height = 280)
thisday=cbind(hours,csk[csk$day==day,2],duchy[duchy$day==day,2])
print (paste(day,length(thisday[,2]),length(thisday[,3])),sep=",")
ylim=c(0,900)#c(0,max(max(thisday[,2]),max(thisday[,3])))
plot(hours,thisday[,2],xlim=c(0,24),xlab="Time (h)",ylab="Insolation (W/m^2)",col="blue",type="l",ylim=ylim)
lines(hours,thisday[,3],col="red")
text(1.5,70,paste0("Day: ",day))
dev.off()
}
for (day in 2:105){
thisday=cbind(hours,csk[csk$day==day,2],duchy[duchy$day==day,2])
ylim=c(0,900)#c(0,max(max(thisday[,2]),max(thisday[,3])))
plot(hours,thisday[,2],xlim=c(0,24),xlab="Time (h)",ylab="Insolation (W/m^2)",col="blue",type="l",ylim=ylim)
lines(hours,thisday[,3],col="red")
text(1.5,70,paste0("Day: ",day))
}
png("somedays.png",width=595,height=842)
chosen<-c(299,298,312,317,348,358,18,22,37,46,79,77,101,91)
months<-c("October 2015","November 2015","December 2015","January 2016","February 2016","March 2016","April 2016")
mypar(7,2)
count=0
for (day in chosen[1:14]){
count=count+1
thisday=cbind(hours,csk[csk$day==day,2],duchy[duchy$day==day,2])
ylim=c(0,800)#c(0,max(max(thisday[,2]),max(thisday[,3])))
plot(hours,thisday[,2],xlim=c(0,24),xlab="Time (h)",ylab="Insolation (W/m^2)",col="blue",type="l",ylim=ylim)
lines(hours,thisday[,3],col="red")
text(0.,0.9*ylim[2],paste0("Day: ",day,", ",months[(count +1)%/% 2]),pos=4)
}
dev.off()
